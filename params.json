{"name":"Puffer pages","body":"[![Build Status](https://secure.travis-ci.org/puffer/puffer_pages.png)](http://travis-ci.org/puffer/puffer_pages)\r\n\r\n# Achtung!\r\n\r\nIt's better to install PufferPages from the HEAD of ruby repo now.\r\n\r\n<pre>gem \"puffer_pages\", :git => \"git://github.com/puffer/puffer_pages.git\"</pre>\r\n\r\n# PufferPages is lightweight rails 3.1 CMS\r\n\r\nInterface of PufferPages based on [puffer](https://github.com/puffer/puffer)\r\n\r\n## Keyfeatures\r\n\r\n* Full rails integration. PufferPages is part of rails and you can different features related to pages in rails application directly\r\n* Flexibility. Puffer designed to be as flexible as possible, so you can create your own functionality easily.\r\n* Layouts. You can use rails layouts for pages and you can use pages as action layouts!\r\n\r\n## Installation\r\n\r\nYou can instal puffer as a gem:\r\n<pre>gem install puffer_pages</pre>\r\nOr in Gemfile:\r\n<pre>gem \"puffer_pages\"</pre>\r\n\r\nNext step is:\r\n<pre>rake puffer_pages_engine:install:migrations</pre>\r\nThis will install PufferPages config file in your initializers, some css/js, controllers and migrations\r\n<pre>rake db:migrate</pre>\r\n\r\nTo start working with admin interface, you need to add some routes like:\r\n<pre>\r\nnamespace :admin do\r\n  resources :pages\r\n  resources :layouts\r\n  resources :snippets\r\nend\r\n</pre>\r\n\r\n## Introduction\r\n\r\nThe first thing, you should do - setup routes if you want pages path different from /(*path).\r\nJust put in your routes.rb:\r\n<pre>puffer_page \"pages/(*path)\" => 'whatever#show'</pre>\r\nDefault pages route you can see with rake routes.\r\n\r\nPufferPages is radiant-like cms, so it has layouts, snippets and pages.\r\nPufferPages use liquid as template language.\r\n\r\n## Pages\r\nPages - tree-based structure of site.\r\nEvery page has one or more page parts.\r\n\r\n## PageParts\r\nPage_parts are the same as content_for block content in rails. You can insert current page page_patrs at layout.\r\nAlso, page_parts are inheritable. It means, that if root has page_part named `sidebar`, all its children will have the same page_part until this page_part will be redefined.\r\nEvery page part must have main page part, named by default `body`. You can configure main page part name in config/initializers/puffer_pages.rb\r\n\r\n## Layouts\r\nLayout is page canvas, so you can draw page parts on it.\r\nYou can use layouts from database or rails applcation layouts for pages.\r\n\r\n### Rails application layouts\r\nFor application layout page_part body will be inserted instead of SUDDENLY! <%= yield %>\r\nFor yield with no params specified puffer will use page part with default page_part name.\r\n\r\nSo, main page part is action view and other are partials. So easy.\r\n\r\n## [Liquid](http://github.com/tobi/liquid/)\r\n\r\n### Variables\r\nThis variables accessible from every page:\r\n\r\n* self - current page reference.\r\n<pre>{{ self.name }}</pre>\r\nself is an instance of page drop. View [this](https://github.com/puffer/puffer_pages/blob/master/lib/puffer_pages/liquid/page_drop.rb) to find list of possible page drop methods\r\n\r\n### include\r\n`include` is standart liquid tag with puffer data model 'file_system'\r\n\r\n#### for page_parts\r\nUse include tag for current page page_parts inclusion:\r\n<pre>{% include 'page_part_name' %}</pre>\r\n\r\n#### for snippets\r\nTo include snippet use this path form:\r\n<pre>{% include 'snippets/snippet_name' %}</pre>\r\n\r\nUsage example:\r\n<pre>\r\n  {% include 'sidebar' %} # this will render 'sidebar' page_part\r\n  {% assign navigation = 'snippets/navigation' %}\r\n  {% include navigation %} # this will render 'navigation' snippet\r\n</pre>\r\n\r\n### stylesheets, javascripts\r\n<pre>{% stylesheets path [, path, path ...] %}</pre>\r\nBoth tags syntax is equal\r\nTags renders rail`s stylesheet_link_tag or javascript_include_tag.\r\n\r\nUsage example:\r\n<pre>\r\n  {% assign ctrl = 'controls' %}\r\n  {% javascripts 'prototype', ctrl %}\r\n</pre>\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","tagline":"Puffer CMS"}